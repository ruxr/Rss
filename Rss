#!/bin/sh
RSSH="Reports/Restore shell script

	@(#) Rss V1.19.2 (C) 2007-2019 by Roman Oreshnikov

This is free software, and comes with ABSOLUTELY NO WARRANTY

Usage: Rss [-U use] [-R rcpt] -s path [subject]
  or   Rss [-U use] [-D date] [-R path] -b path [path ...]
  or   Rss [-U use] [-D date] [-R root] [-n] -{rx} pattern [pattern ...]
  or   Rss [-U use] [-D date] [-n] -{aceil} pattern [pattern ...]
  or   Rss [-U use] [-D date] [-n] -{doz} path

Options:
  -a       Show all versions of objects with minimum information
  -b       Backup the objects
  -c       Show changed objects since DATE
  -D DATE  Use DATE as timestamp (default: now)
  -d       Show differences between a file and its previous version
  -e       Erase objects except last
  -h       Display this text
  -i       Show full information about live objects
  -l       List of live objects
  -n       Invert the condition or not ask for confirmation
  -o       Output file content to STDOUT
  -R PATH  Backup the object as PATH
  -R RCPT  Recipient for mail reports (default: \$LOGNAME)
  -R ROOT  Restore to directory ROOT (default: .)
  -r       Restore objects with confirmation request
  -s       Execute shell script or a set of shell scripts from a directory
  -U USE   Use base (default: \$HOME/.Rss)
  -x       Restore file revisions with the save date as extensions
  -z       Delete object with confirmation request

Internal function for reports mode:
Rss [path [-|+ part] [= diff] [text]]
  path     Absolute path for testing or relative name to save the output of the
             following commands, except the name '-'. If absolute path ends
             with / - will be tested all hierarchy
  - part*  Pattern to exclude from testing
  + part*  Pattern to include in testing
  = diff   Non default command to output differences between stored and current
             version the file (default: /usr/bin/diff -ut)
  text     Comment for report
Notes:
  *  - for hierarchy testing

Report bugs to <r.oreshnikov@gmail.com>"
RSSA=	# Action
RSSD=	# TimeStamp
RSSN=	# Key
RSSR=	# Recipient or path
RSSU=	# DataBase
Wrn() { echo "Rss: $*" >&2; }
Err() { Wrn "$*"; exit 1; }
Rss() {
	[ -z "$1" ] || Err Option -$RSS already set
	case ${2:-/}$OPTARG/ in
	-*|$2//);;
	/-*|*[\	\ ]*|/*//*) Err Illegal value for option -$RSS
	esac
}
while getopts D:R:U:abcdehilnorstxz RSS; do
	case $RSS in
	D)	Rss "$RSSD" -; RSSD=$OPTARG
		case $RSSD in ''|*[!0-9]*);; *) RSSD=@$RSSD;; esac
		RSSD=$(/bin/date --date="$RSSD" +%s 2>/dev/null) ||
			Err "Invalid timestamp $OPTARG";;
	R)	Rss "$RSSR" /; RSSR=$OPTARG;;
	U)	Rss "$RSSU"; RSSU=$OPTARG;;
	[abcdeilorsxz])	[ -z "$RSSA" ] || Err Action already set as -$RSSA
		RSSA=$RSS;;
	n)	RSSN=n;;
	h)	echo "$RSSH"; exit;;
	?)	echo "Try 'Rss -h' for more information" >&2; exit 1
	esac
done
[ -z "$RSSA" ] && echo "Rss $@" && exit
shift $(expr $OPTIND - 1)
[ $# = 0 ] && Err Argument is required
[ -n "$RSSU" ] || RSSU=$HOME/.Rss
case $RSSU in /*);; *) RSSU=$(pwd)/$RSSU;; esac
trap "Err Terminated by signal" 1 2 3 13 15
umask 066
#
# Report
#
Rss() {
	RSSE=$? RSS=$RSST/1
	while [ "$RSSE" = 0 ]; do
		if [ -n "${RSSN##/*}" ]; then
			RSSE=$RSS RSS=$RSST/2; exec >"$RSS" 2>&1
		elif [ -s "$RSS" ]; then break
		elif [ -z "$RSSN" ]; then RSS=; break
		elif [ ! -f "$RSSN" -o -L "$RSSN" ]; then
			$0 -U "$RSSU" -b "$RSSN" && RSS=; break
		elif [ -r "$RSSN" ]; then RSSE=$RSSN
		else Wrn "Failed to access $RSSN"; break
		fi
		[ ! "x$RSSC" = xfalse ] && {
		$0 -U "$RSSU" -o "$RSSN" >"$RSST/3" || break
		${RSSC:-/usr/bin/diff -ut} "$RSST/3" "$RSSE"; }
		case $? in
		0);;
		1) $0 -U "$RSSU" -R "$RSSN" -b "$RSSE";;
		*) Wrn Comparison exit code: $?
		esac
		[ -s "$RSS" ] || RSS=
	done
	# Send previous stage report
	if [ -n "$RSS" ]; then
		[ ! -s "$RSST/0" -a -n "$RSSH" ] && {
			echo "$RSSH$RSSM"; /bin/cat "$RSS"
			} | /usr/sbin/sendmail -t >"$RSST/0" 2>&1 || {
			echo "${RSSM:--n}"; /bin/cat "$RSS"; echo
			} >>"$RSST/0"
	fi
	# New stage
	exec >"$RSST/1" 2>&1
	RSSC= RSSN= RSSM="### Rss $*:" RSSP=$1
	case /$1/ in
	/-/|//)	[ $# = 0 ] || shift; RSSM=${*:+### $*:};;
	/*//*/|/-*|*/./*|*/../*|*[*?\[\]\'\\\ \	]*|/[!/]*//)
		Wrn "Invalid object name $1";;
	*//)	RSSE= RSS=
		while shift; do
			case $1 in [+-]);; *) break;; esac
			[ "x${RSS:-$1}" = x$1 ] && case /$2/ in
			//) Wrn Missing pattern for $1;;
			/*//*/|*/./*|*/../*|*[\	\ \\]*|//*)
				Wrn "Invalid pattern $2";;
			*) RSS=$1 RSSC="$RSSC $RSSP$2"; shift; continue
			esac || Wrn Incompatible operations for patterns
			return
		done
		if [ -n "$RSSC" ]; then
			case $RSS in -) RSS=d;; *) RSS=p RSSE=-n;; esac
			RSSC=$(echo "$RSSC" | /bin/sed 's%//[/]*%/%g
				s%\([$/.]\)%\\\1%g;s%\[!%[^%g;s%?%.%g;s%*%.*%g
				s% \([^ ]*\)%/^\1$/'$RSS';/^\1\\//'$RSS';%g')
		fi
		{ $0 -U "$RSSU" -l "$RSSP*" && /usr/bin/find "$RSSP"
		} >"$RSST/2" || return
		/bin/sed $RSSE "s%/$%%;$RSSC" "$RSST/2" |
			LANG=C /usr/bin/sort -u >"$RSST/4"
		exec <"$RSST/4"
		while read RSS; do Rss "$RSS" "$@"; done;;
	*)	while shift; do
			[ "x$1" = x= ] || break
			[ -n "$RSSC" ] && Wrn Comparator already set ||
			case $(type ${2%% *}) in
			${2%% *}" is "[/.]*|${2%% *}" is a s"*)
				RSSC=$2; shift; continue;;
			*) RSS=${2:+Illegal}; Wrn "${RSS:-Missing} value for $1"
			esac
			return
		done
		RSSN=$RSSP RSSM="### ${*:-Changes in $RSSN}:"
	esac
}
case $RSSA in
s)	RSSA=$1; shift; RSS="$*"
	if [ -d "$RSSA" ]; then set -- "$RSSA"/*
	elif [ ! -f "$RSSA" ]; then Err "Missing file $RSSA"
	elif [ ! -x "$RSSA" ]; then Err "Not executable file $RSSA"
	else set -- "$RSSA"
	fi
	RSST=$(/usr/bin/mktemp -dq) || Err Failed to create temporary directory
	trap "/bin/rm -rf $RSST" 0
	[ -z "$RSSR$RSS" ] && RSSH= || RSSR=${RSSR:-$LOGNAME} RSSH="To: $RSSR
Subject: ${RSS:-Rss report of run $RSSA}
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
"
	RSSD=$(/bin/date) RSSN=
	readonly RSSH RSST RSSU Rss Wrn
	for RSSA do
		[ -f "$RSSA" -a -x "$RSSA" ] && (
		trap Rss 0
		[ -r "$RSSA" ] || Err "Failed to access $RSSA"
		Rss - "Run $RSSA"
		case $RSSA in */*) . "$RSSA";; *) . "./$RSSA";; esac
		)
	done
	[ -f "$RSSU" ] && (
	trap Rss 0
	Rss - Changed objects
	$0 -U "$RSSU" -D "$RSSD" -c \*
	)
	if [ -s "$RSST/0" ]; then
		[ -z "$RSSR" ] || Wrn Failed to send mail to $RSSR
		/bin/cat "$RSST/0"
	fi
	exit
esac
#
# Restore
#
SQL="CREATE TABLE IF NOT EXISTS db (
	d INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP,
	t TEXT NOT NULL,
	p TEXT NOT NULL,
	i TEXT,
	b TEXT);
"
Sql() {
	/usr/bin/sqlite3 -separator ' ' "$RSSU" "$SQL$*" 2>/dev/null ||
		Err SQLite3 database access error
}
Rss() {
	case /$1/ in
	*//|/*//*/|/-*|*/./*|*/../*|*[\'\\\ \	]*);;
	*[*?\[\]]*) [ $# = 2 ] && return;;
	*) return
	esac
	Err "Invalid ${2:-path} $1"
}
Dir() {
	case $1$RSSR in
	'') RSSR=.;;
	/) RSSR=;;
	//) Err Illegal value for option -R
	esac
}
Inf() { /usr/bin/stat -c '%a %U:%G' $1 2>/dev/null; }
Arc() { { /usr/bin/xz -c $1 | /usr/bin/base64 -w0; } 2>/dev/null; }
Cmp() { { /usr/bin/xdelta3 -s $1 <$2 | /usr/bin/base64 -w0; } 2>/dev/null; }
Src() { echo $1 | { /usr/bin/base64 -d | /usr/bin/xz -dc; } 2>/dev/null; }
Dst() {
	case $B in
	'');;
	/*) Src $B >$2;;
	*) echo $B | { /usr/bin/base64 -d | /usr/bin/xdelta3 -dcs $2 >$2~ &&
		/bin/mv $2~ $2; } 2>/dev/null
	esac || Err Failed to extract $1
}
Get() {
	B=$(Sql "SELECT b FROM db WHERE p='$1' AND d>=datetime($2,'unixepoch')
		AND b NOTNULL ORDER BY rowid DESC") || exit
	for B in $B; do Dst $1 $3; done
}
Tmp() {
	[ -n "$W" ] && return
	W=$(/usr/bin/mktemp -dq) || Err Failed to create temporary directory
	trap "/bin/rm -r $W" 0
}
Ask() {
	case $3 in
	-)	T="regular file";;
	d)	T="directory";;
	l)	T="symbolic link";;
	*)	Err Data error for $2
	esac
	T="Rss: $1 $T $2"
	[ -z "$4" ] || T="$T ($(/bin/date --date="@$4" +%F\ %T))"
	[ -n "$RSSN" ] && echo "$T" && return
	read -p "$T? [y/N]: " T
	case $T in [yY]);; *) return 1;; esac
}
case $RSSA in
[bdoz])	[ $# = 1 -o "$RSSA$RSSR" = b ] || Err "Only one argument is required";;
*)	RSS=; for P do Rss "$P" pattern; RSS="${RSS:+$RSS OR }p GLOB '$P'"; done
	[ -z "$RSSD" -o $RSSA = c -o $RSSA = x ] ||
		RSS="($RSS) AND d<=datetime($RSSD,'unixepoch')"
esac
case $RSSA in
a)	[ -z "$RSSN" ] && T="t,p" || T="t,p,i"
	Sql "SELECT datetime(d,'localtime'),$T FROM db WHERE $RSS ORDER BY p";;
b)	Dir /
	[ -n "$RSSD" ] || D="datetime('now')"
	for N do
		[ -n "$RSSR" ] && P=$RSSR || P=$N
		Rss "$P"
		B=$(Sql "SELECT rowid,strftime('%s',d),t,i,b FROM db
			WHERE p='$P' ORDER BY rowid DESC LIMIT 1") || exit
		set -- $B
		SQL= R=$1 U=$2 B=
		[ $# = 0 ] || shift 2
		if ! I=$(Inf "$N"); then T=$1 I=
		elif [ -L "$N" ]; then T=l I=$I\ $(/bin/readlink "$N") || exit
		elif [ -d "$N" ]; then T=d
		elif [ ! -f "$N" ]; then T=$1 I=
		elif [ -r "$N" ]; then T=- B=$(Arc "$N") || exit
		else Err Failed to access $N
		fi
		[ "x$T${I:+ $I}${B:+ $B}" = "x$*" ] && continue
		if [ -n "$RSSD" ]; then
			[ -z "$U" ] && D=$RSSD || D="MAX($RSSD,$U)"
			D="datetime(MIN(strftime('%s','now'),$D),'unixepoch')"
		fi
		[ -z "$I" ] && I=NULL || I=\'$I\'
		if [ -z "$B" ]; then
			Sql "INSERT INTO db VALUES($D,'$T','$P',$I,NULL)"
		else
			Tmp
			if [ "x$1" != x- -o -z "$4" ]; then
				R=
			elif [ "x$B" = "x$4" ]; then
				U=NULL
			else
				U=\'$(Src "$4" >$W/0 && Cmp "$N" $W/0)\' ||
					Err Failed to ex $P
			fi
			echo "INSERT INTO db VALUES($D,'$T','$P',$I,'$B');
				${R:+UPDATE db SET b=$U WHERE rowid=$R}" >$W/0
			Sql ".read $W/0"
		fi
	done;;
c)	[ -z "$RSSN" ] && I=">=" || I="<"
	[ -z "$RSSD" ] && D="'now'" || D="$RSSD,'unixepoch'"
	Sql "SELECT p,t,i FROM db WHERE d $I datetime($D) AND
	rowid IN (SELECT MAX(rowid) FROM db WHERE $RSS GROUP BY p) ORDER BY p";;
d)	Rss "$1"
	[ -z "$RSSD" ] || RSSD="AND d<=datetime($RSSD,'unixepoch')"
	N=$(Sql "SELECT rowid,d FROM db WHERE p='$1' AND t='-' AND i NOTNULL
		$RSSD ORDER BY rowid DESC LIMIT 2") || exit
	[ -n "$N" ] || Err Failed to get the difference for $1
	P=$1 SQL=
	Tmp
	set -- $N
	Sql "SELECT b FROM db WHERE p='$P' AND t='-' AND b NOTNULL
		${4:+AND rowid>=$4} ORDER BY rowid DESC" >$W/0
	>$W/2
	exec <$W/0
	while read B; do
		/bin/ln -f $W/2 $W/1
		Dst $P $W/2
	done
	[ -n "$4" ] && U="$W/2 $W/1" D="$5 $6" ||
		U="/dev/null $W/2" D="1970-01-01 00:00:00"
	/usr/bin/diff -u $U |
		/bin/sed "1{s|.*|--- $P\t$D|};2{s|.*|+++ $P\t$2 $3|}";;
e)	if [ -z "$RSSN" ]; then
		Sql "DELETE FROM db WHERE $RSS AND rowid NOT IN
		(SELECT MAX(rowid) FROM db WHERE $RSS GROUP BY p);
		DELETE FROM db WHERE $RSS AND i ISNULL; VACUUM"
	else
		Sql "DELETE FROM db WHERE $RSS; DELETE FROM db WHERE rowid IN
		(SELECT MIN(rowid) FROM db GROUP BY p) AND i ISNULL; VACUUM"
	fi;;
i)	[ -z "$RSSN" ] && I=NOTNULL || I=ISNULL
	Sql "SELECT datetime(d,'localtime'),t,p,i FROM db WHERE i $I AND
	rowid IN (SELECT MAX(rowid) FROM db WHERE $RSS GROUP BY p) ORDER BY p";;
l)	[ -z "$RSSN" ] && I=NOTNULL || I=ISNULL
	Sql "SELECT p FROM db WHERE i $I AND
	rowid IN (SELECT MAX(rowid) FROM db WHERE $RSS GROUP BY p) ORDER BY p";;
o)	Rss "$1"
	if [ -z "$RSSD" ]; then
		B=$(Sql "SELECT b FROM db WHERE p='$1'
			ORDER BY rowid DESC LIMIT 1") || exit
		[ -z "$B" ] || Src $B || Err Failed to extract $1
	else
		D=$(Sql "SELECT strftime('%s',d) FROM db WHERE p='$1' AND
			d<=datetime($RSSD,'unixepoch')
			ORDER BY rowid DESC LIMIT 1") || exit
		[ -z "$D" ] || { SQL=; Tmp; Get $1 $D $W/0; /bin/cat $W/0; }
	fi;;
r)	P=$(Sql "SELECT p FROM db WHERE $RSS GROUP BY p ORDER BY p") || exit
	SQL=
	Dir
	for P in $P; do
		Rss "$P"
		N=$(Sql "SELECT strftime('%s',d),t,i,b FROM db WHERE p='$P'
			${RSSD:+AND d<=datetime($RSSD,'unixepoch')}
			ORDER BY rowid DESC LIMIT 1") || exit
		set -- $N
		[ -n "$3" ] || continue
		N=$RSSR/${P#/} U=$1 B=
		if ! I=$(Inf "$N"); then T=$2 I=
		elif [ -L "$N" ]; then T=l I=$I\ $(/bin/readlink $N) || exit
		elif [ -d "$N" ]; then T=d
		elif [ ! -f "$N" ]; then T=$2 I=
		elif [ -r "$N" ]; then T=- B=$(Arc "$N") || exit
		else Err Failed to access $N
		fi
		[ "$1 $T${I:+ $I}${B:+ $B}" = "$*" ] && continue
		Ask Restore $N $2 || continue
		/bin/mkdir -p ${N%/*} 2>/dev/null ||
			Err Failed to create directory ${N%/*}
		case $2 in
		[l-]) I=$(/usr/bin/mktemp -q $N.XXXXXX);;
		d) [ -d "$N" ] && I= || I=$(/usr/bin/mktemp -dq $N.XXXXXX)
		esac || Err Failed to write to directory ${N%/*}
		[ -z "$I" ] || trap '/bin/rm -rf $I $I~' 0
		case $2 in
		-)	Get $P $1 $I; /bin/touch -d "@$1" $I;;
		l)	M=; /bin/ln -sf $5 $I
		esac
		[ x$2 = xl ] || /bin/chmod $3 ${I:-$N} 2>/dev/null ||
			Err Failed to set $3 mode for $N
		[ x$2 = xl ] || T=
		/bin/chown ${T:+-h} $4 ${I:-$N} 2>/dev/null ||
			Err Failed to set ownership as $4 for $N
		if [ -n "$I" ]; then
			/bin/mv -T --backup=numbered $I $N 2>/dev/null &&
				trap 0 || Err Failed to restore $N
		fi
	done;;
x)	Dir
	Tmp
	[ -z "$RSSD" ] || RSS="($RSS) AND d>=datetime($RSSD,'unixepoch')"
	Sql "SELECT p,strftime('%s',d),i,b FROM db WHERE $RSS AND t='-'
		AND i NOTNULL ORDER BY p,rowid DESC" >$W/0
	SQL=
	exec <$W/0
	while read P D M O B; do
		Dst $P $W/1
		P=$RSSR/${P#/}.$(/bin/date --date="@$D" +%F-%H-%M-%S)
		[ -z "$RSSN" ] && I="-m $M -o ${O%:*} -g ${O#*:}" || I=-m644
		/usr/bin/install -Dp $I --backup=numbered $W/1 $P 2>/dev/null ||
			Err Failed to create $P
	done;;
z)	Rss "$1"
	[ -z "$RSSD" ] || RSSD="AND d<=datetime($RSSD,'unixepoch')"
	N=$(Sql "SELECT rowid,t,strftime('%s',d) FROM db WHERE p='$1' $RSSD
		ORDER BY rowid DESC LIMIT 2") || exit
	[ -n "$N" ] || Err Failed to remove $1
	P=$1 SQL=
	set -- $N
	Ask Delete $P $2 $3 || exit
	S="DELETE FROM db WHERE rowid=$1; VACUUM"
	case $2$5 in
	[dl-]-) Tmp
		Sql "SELECT rowid,t,i,b FROM db WHERE p='$P' AND rowid>=$4
			ORDER BY rowid DESC" >$W/0
		R2= R3= T2=x T3=x M2= M3= >$W/2 >$W/3
		exec <$W/0
		while read R T M O B; do
			/bin/ln -f $W/2 $W/1
			/bin/ln -f $W/3 $W/2
			R1=$R2 R2=$R3 R3=$R
			T1=$T2 T2=$T3 T3=$T
			M1=$M2 M2=$M3 M3=$M$O
			[ "x$T" = x- ] && Dst $P $W/3
		done
		case $T1$T2 in
		[xdl]-)	B=$(Arc $W/3);;
		-[dl-])	if ! /usr/bin/cmp -s $W/1 $W/3; then
				B=$(Cmp $W/1 $W/3)
			elif [ "x$M1" = "x$M3" ]; then
				SQL="UPDATE db SET b=(SELECT b FROM db
					WHERE rowid=$R1) WHERE rowid=$R3;
					DELETE FROM db WHERE rowid=$R1;"
			else
				SQL="UPDATE db SET b=NULL WHERE rowid=$R3";
			fi
		esac
		[ -z "$SQL" ] &&
			echo "UPDATE db SET b='$B' WHERE rowid=$R3; $S" >$W/0 &&
			S=".read $W/0"
	esac
	Sql "$S"
esac
